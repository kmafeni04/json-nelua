local json = require "..json"

-- Tests exoected to pass
do
  local content = [[
    {
      "state": "FCT",
      "age": 10,
      "props": {
        "height": 15
      },
      "arr": [1,2,3,4]
    }
  ]]

  local Rec = @record{
    state: string,
    age: integer,
    props: record{
      height: integer
    },
    arr: sequence(integer)
  }
  

  local ok, rec, err = json.parse_string_to_record(content, Rec)

  assert(ok, err)
  assert(rec.state == "FCT")
  assert(rec.age == 10)
  assert(rec.props.height == 15)
  assert(rec.arr[1] == 1)
  assert(rec.arr[4] == 4)
end

do
  local Rec = @record{
    state: string,
    age: integer,
    props: record{
      height: integer
    },
    arr: sequence(integer)
  }
  

  local ok, rec, err = json.parse_file_to_record("test-files/to_record.json", Rec)

  assert(ok, err)
  assert(rec.state == "FCT")
  assert(rec.age == 10)
  assert(rec.props.height == 15)
  assert(rec.arr[1] == 1)
  assert(rec.arr[4] == 4)
end

do
  local content = [[
    {
      "name": "John"
    }
  ]]

  local ok, node, err = json.parse_string(content)

  assert(ok, err)

  assert(node:is_obj())

  assert(node:get_obj()["name"]:get_str() == "John")
end

do
  local content = [[
    {
      "arr": [1, 2, 3, 4]
    }
  ]]

  local ok, node, err = json.parse_string(content)

  assert(ok, err)

  assert(node:is_obj())

  assert(node:get_obj()["arr"]:get_arr()[1]:get_num() == 1)

  assert(node:get_obj()["arr"]:get_arr()[4]:get_num() == 4)
end

do
  local ok, node, err = json.parse_file("test-files/test.json")

  assert(ok, err)

  assert(node:is_obj())

  assert(node:get_obj()["string"]:get_str() == "Hello, world!")

  assert(node:get_obj()["object"]:get_obj()["nested_object"]:get_obj()["inner_key"]:get_str() == "inner_value")
end

do
  local Config = @record{
    debug: boolean,
    port: integer,
    hosts: sequence(string),
    metadata: record{
      version: string,
      updated_at: string
    }
  }

  local content = [[
  {
    "debug": true,
    "port": 8080,
    "hosts": ["localhost", "127.0.0.1"],
    "metadata": {
      "version": "1.0.0",
      "updated_at": "2024-02-12"
    }
  }
  ]]

  local ok, config, err = json.parse_string_to_record(content, Config)

  assert(ok, err)
  assert(config.debug == true)
  assert(config.port == 8080)
  assert(config.hosts[1] == "localhost")
  assert(config.metadata.version == "1.0.0")
end

-- Tests expected to fail
do
  local content = [[
    {
      "state": "FCT",
      "age": 10,
      "props": {
        "height": 15
      },
      "arr": [1,2,3,4]
    }
  ]]

  local Rec = @record{
    state: string,
    props: record{
      height: integer
    },
    arr: sequence(integer)
  }
  

  local ok, rec, err = json.parse_string_to_record(content, Rec)

  assert(not ok, "Test expected to faile with `Field does not exist in record`")
end

do
  local Rec = @record{
    state: string,
    props: record{
      height: integer
    },
    arr: sequence(integer)
  }
  

  local ok, rec, err = json.parse_file_to_record("test-files/to_record.json", Rec)

  assert(not ok, "Test expected to faile with `Field does not exist in record`")
end

do
  local content = [[
    {
      "name": "lol",
    }
  ]]

  local ok, node, err = json.parse_string(content)

  assert(not ok, "Test should to fail with `Trailing comma`")
end

do
  local content = '{"name": "lol}'

  local ok, node, err = json.parse_string(content)

  assert(not ok, "Test should to fail with `Unexpected end of file`")
end
